image: maven:latest

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy


variables:
    MAVEN_CLI_OPTS: " --batch-mode"
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"

cache:
    paths:
        - .m2/repository
        

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - cd my-app  # Change directory to your Maven project directory
    - echo "Compiling the code..."
    - mvn $MAVEN_CLI_OPTS compile
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - cd my-app  # Change directory to your Maven project directory
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"
    - mvn $MAVEN_CLI_OPTS test

  artifacts:
    when: always
    reports:
      junit:
          - target/surefire-reports/TEST-*.xml
          - target/failfire-reports/TEST-*.xml
    

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - cd my-app  # Change directory to your Maven project directory
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: staging
  script:
    - cd my-app  # Change directory to your Maven project directory
    - echo "Deploying application..."
    - mvn $MAVEN_CLI_OPTS package
    - mvn $MAVEN_CLI_OPTS exec:java -Dexec.mainClass="com.mycompany.app.App"
    - echo "Application successfully deployed."
